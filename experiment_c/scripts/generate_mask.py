
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

# Image, Int, Int, Int -> Array

# Takes an image in its injection version and
# returns a numpy array that acts as a mask of the stripes.

# injection_image: image in injection version
# offset: number of pixels width from border to be ignored
# delta_x: pixel width of stripes

# Each coefficient in the returned matrix is one of the following:
# -2 means background,
# -1 means offset (to avoid noise close to border),
# 0, 1, 2, 3, ... mean the index of the stripe from right to left.
def get_mask(injection_image, offset, delta_x):

    injection_array = np.array(injection_image)
    height = injection_array.shape[0]
    width = injection_array.shape[1]

    mask_array = np.full((height, width), -3)

    # Iterate over each row of the image
    for row in range(height):

        STATE = 'OUTSIDE'
        i = offset
        j = delta_x
        stripe_idx = 0

        # Iterate over each pixel in the row
        for col in reversed(range(width)):

            if STATE == 'OUTSIDE':
                if injection_array[row, col] == 0:
                    mask_array[row][col] = -2
                else:
                    STATE = 'OFFSET'
                    mask_array[row][col] = -1

            elif STATE == 'OFFSET':
                if i > 0:
                    mask_array[row][col] = -1
                    i -= 1
                else:
                    STATE = 'STRIPES'
                    mask_array[row][col] = 0

            elif STATE == 'STRIPES':
                if j > 0:
                    mask_array[row][col] = stripe_idx
                    j -= 1
                else:
                    stripe_idx += 1
                    mask_array[row][col] = stripe_idx
                    j = delta_x

    return mask_array


# The following function visualizes the stripes on the given
# mask array.
# **This function was completely generated by ChatGPT**
def visualize_mask(mask_array):
    # Generate a random NumPy matrix
    mask_array = mask_array

    # Get the unique numbers in the matrix
    numbers = np.unique(mask_array)

    # Assign a random color to each number
    color_map = {}
    for number in numbers:
        color = np.random.rand(3)
        color_map[number] = color

    # Create a colored image based on the matrix
    image = np.zeros((mask_array.shape[0], mask_array.shape[1], 3))
    for i in range(mask_array.shape[0]):
        for j in range(mask_array.shape[1]):
            number = mask_array[i, j]
            color = color_map[number]
            image[i, j] = color

    # Display the image
    plt.imshow(image)
    plt.axis('off')
    plt.show()
        